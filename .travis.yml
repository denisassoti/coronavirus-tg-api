language: python
python:
  #- "3.6"
  - "3.7"
  #- "3.8"
services:
  - docker
install:
  - "pip install pipenv"
  - "pipenv install --dev --skip-lock"
script:
  - "make test"
  - "make lint"
  - "make check-fmt"
notifications:
  email: false

# env:
#   global:
#     secure: DOCKER_USER
#     secure: DOCKER_PASSWORD
#     secure: HEROKU_API_KEY
#     secure: TELEGRAM_CHAT_ID
#     secure: TELEGRAM_TOKEN
# replace the following env configurations with your own
env:
  global:
  - secure: EmRNXGrWtCC1bSusuOzJynDMX9WIZ2/R/UF5WPvtO4UE9KJtu+7VCD5hNN4omsFG81HHjEae+Mqf42JMBUYLu+vu/BqTOQFGW1PN40rwTXVXUys4J6QYyXm3bid7aDR6vc7n/UU77NjHJXYogh6+/JBoxE3rxYb0FT7jowZKtfNIdqQG3RActonSacGJLOgCtFjDAif3pY/fKOuuqW49NRfqIc85BW5lGCepcN/M5DqV2XDjeMkQgL1N9BaYkW+0xWgBH3zws19CtDqIGEsMU/4INfr896sGap3wSNGWmAEXI5CJ8x4/8T/dscx4XB/skedyjYKe+diBQVFyjovULXsWGRgzg0z6m0uojEm3qC8Po3F3GC9RoC0DS+IiSIyAArAG51lF1SPRLL4aQuRS0V12Rld1yvC84tXdFkOAk+0BfnsxQZNO9+nJWAqpdUGnlcWHvhezrKT5+NzpUXr7AKg7LcrMkLJPsXtgBrXMVABLzACEvPW8EiAkU9fqzR2fGWWvedIXyBef/RAcC6ddomjZdW802Yh2z9l8RZS4MWtUjmOUmtrb5J1CqY24Bxf9bMu3AB9jLT5eTmUiCkQY/euEMkkfPuPyBNHT8dIUuunibcbp75auzSdfumFGed2hRsVhRBMTzg/e84V2FZhnPHS9bftUdJALoMKgvMtvenM=
  - secure: dvi/4D20DhaNLu+16bFaIKM5XRMBPrdprt92yfyImN8A//cAr/L56sTsu5DZbkkok8ShFo6WL0cGS8C1n88xXAAeghRC9LM6v6BKsPK1U9hRr/rFjFooUE4rcRSTBta80N6Keljd3G1RsaD31WugN07VdbGLzcp0RjivcQ+GQXt5++VhKWQy1rRFrwraVAL9AvZNeBjzogBY0vpPPlGlMBerXoNm8YnYKLgQ8QLEHuLi6l5Ukf9vIHGfGjaFudxKUDTwCHGgPLwpwC8qdyx2yaR+6IyCP7Gf6dYUesKshuqyxtj0HUiGt6ztUOEd2q38xaywO23V8pzPileTUXH289Q4k+K17a5BjZOhdRJGhbqz0WTOn+MZMa7Q3vMyOK2lBr7lg+yIzGKIEHNOZuRh95Wg3ZpZ/lhZUlReLm9gU7gu/Z2/N8quieegbBqItdAZjwUKVWDP0HpCoZbPDeriaFoeULI21CBB9nvMIfe2bcwE+EtAbnrtfo3xW78MYa598wqXr55nsqIBRqbTehlsLns58YuOgHKeGVLgj1Xalz2o2wmMgfF2MUm+WOmIERhvk4a79f1EnBT0QO2UnR6upv1TzXnpb8PuaobhtFxQE+vzbRkxcGniIjRMhO9rRL8eBEQSFXV5oxJZOsYqZRv/iaTJRrbEvzxSqiGS1YA3kmk=
  - secure: fE51YfOKfMsqdkPkcKVVUdNm/yrtnZzYN9sk+QohsV8uaJUIpGSBhV4dRybA0g32CHNz9oQCFF4ijUqjXU5DxjvAWc5/wdJejgXhP/esy/mWmsPAMOW9bKFGi8lUQoTBlv8vzM03UZBkbb4cDlJNMqiGwJWXFUJhYQsnPvborIg4YUFxMp34lUSXSugTL0dd/cMWJWvjoGk5w7RyRErxHm64yKV+s/s1yJoBnmZf/cMlQ/DsCGp5HNuWflVoKyljjfRnaAapZd3B04ZcwtVugeN48WejXCMWz4dWf0odBV/Hkdszek83pXS3CqWsSe4Myev+Y6cY4VDmBfyDJlbSvWpJivaBQs+aDCIGOwDsusPEjVajflqy/2KVt2nq24NIomk++8TzQl+xj7PbSh+ylZUsrbyd6lBxBVPYJqfbHQIguuq+/gyrAw9+9VPS48TZSvvisIVZT4ym2S9i191VMWWKwYSWuo5ri/+eSXsdcpuLdCqTb3MeFhASBgHhOrOBIhK4I/JKQCygnRPp1rmQ9MuyvIsJU9QfiNQQMk5wZXB24aA+CB3jgYgWD93nNhAqDt7hP7sU0TAGLQb+BDPIUt/HnTdNd2Sd8hOBChph3LoQ99rYybYbGOfAsHep0cis4y/DDorL+cRBXwm3yT19qCjTt3ypN/BjF1JZLA/OrYc=
  - secure: TpJ2TPTLOL2MnzpZiDxHM3yohokwB/7OC8uV4qbrZnY7JOGIkDKhrjiplMI19GvAwvdkHa/3+kWouQlVTs9dQ3QE15GNyXnwuz/0keqVy6IjPz571XzRvwlO/AfWD30L3N7LxpGhAjy4X9K5zJQD8XuytxHnZa4qnQr12Pz3TPRUjXYUZrNrmEOfarvLWVJQdd4uyjjTkHzyPiEKz+pghF6kVW5BNPj8YoYDO9z8P27EzpMQnQy0Mh1Cw4hYseaj4PKtDQyyV8u5aHM4F/wajdZEp0EfAGZp5QweJaPcx+H/0h6V2gqV8BO3SgA22lcTMx7LUY7BtiDvb4tHJ22hAd1XYn8gjmCKClsyp57z6shOvMKxXooNdCJdI7ridBEsxRBrKlZiURmfx28xod0QLm7vf5AZtE8WJOlKUUUnNxrzP7U43p+VbqiVWrq4HhE8ZYK2gzmSD2CWVC+QdtFYufi6at5tfItjAPJVUj91umg1TCTTrw9vQ9X3/fmeRJIRqdBsLmHhevVcUgfRo203JOajies9u8DYb0BfwITIq6vfxbAT8tvguIOAVSbYk/696xl2U17neXtQzq5st4AiMN1uhgyv5nkGRZgniD1wYwSsXII/wYyBKyYthZfciXgl3p89kFKt4MHunoe2xOGsavn/3AN8Du1IXuhTA7sbU9Q=
  - secure: Mr2fo+xzL4wxKEeeGeTSQv6ETqe0loALSNxFfIbO767t0Sgbb/D5Ok5+3ZbHrAGjpK7DD15a0LDEAq5HuMAq1o+7ag6UmYv8NK1oRMKTGeccUW9b9+D56di90tCeJlaUu1/tqHLg0SkNuCs8n7gtxJFPwi3AcPAEgeyCw2WIOusvOCNfSeLa3/GbCoighv2L49KMS82eXgJ+jHfcM5r1cLE+w73bLgWMm03JDktK+LenfnAp7hH0BRDmttTMXsaeTlayb8RqrmpLsKgPH5NrCAPhqFK5d0BJt1wuBqzr9/vP+2W+2/0uhFgSDpIOzcfNMfng4jxXPyjV+5kfDZecy7wKM5ehCQIT+Iy3O5q9d7X3ZGirDwFkH1C6h/U94AnkENGZcl6sNkMED1/h4+Y68ep4QKJ/nJ5rYkAk2PeDSqfmRRC7Wfh3OXTPvfTA/g4XgpQHEkiZmwzLDdAGBo8dO8iSzB8wBZNBZt04PNiYg983YHkPFTUdJZXL1/Ae37iTVm9XfpwrhBMQReoPpu3bVoBo3xNO2whtsIvnlwDQTSz4DEUsna7w3wlynA3x1XqquSVPl8XAwphYm2YKGWnlVfaLyrDhFgN1GGllX3Ouqd4eCpWnDISovUlTGihHwvhWZ2+HB5WlOBOdtr4p9w60dBZcowonT/GYbJD+6iXJ3L0=
  - secure: h7O1KB4VgGMJxy9B+bqSHErlF+aZtwpaJ11GuXfViLCIvAborXTazO9ZrKTNBwTalOYI3SVNUNrCtQ8X8HmoYWrpJTERb95/MsH6wNH2Yy2OKCQV9QeHnBknel0a+x4BhdnZH4Ubn30Q4Ol8obC1LmN3zDXTFS0Vsa13wi/A9mlO65pKYKwUs23WNQJ+e1l4tEydBUGhmnbdCn+gpvNw/0SFv5QQ4Y2hmpMb830XDZUTmNHDwiQBROuaXwE9F6Mvh93L2oYiWGx6JX4XRAtjw7h3H/GVROB+vKIarxhZtdXCCPBenT92weN7mQ4bPNxloIzg8RLfkGcM4IPvZUQTgqcyExIYQIvwZtJMjxxs1laeuaOEDkup5NrF1PhSFojmUmixytxneYdcco/ex4vmhUA3aW9APMM6kA7dAu2Izweh49+Mm9NqObeRa+u74soFTRDd/e8UzIuyPFF2kbmz6oqIR0ItpfBARxoJPS6qHkhT1Zu+6JFRSJOtm3A8qHgytgR2GyW6yab34hk3KBnauEXNwMMYlKA+7lAKSKfX2aFSIXDlVSl85HoWAUHpfdn8RKPD9z7T2dvVTdOKCHNRf+Bta+hTCq1JxRiAMNbg3rPc3jPtgWqmEBX+giIIGjOU0c7HEjqBKhaVj7RenFpZv17BFfowUJ0v4EFcxxflxik=


# Create Docker image for our app and push it to Dockerhub repository and send messages to the Teams channel after the `script` job is successfully executed
after_success:
  - coveralls
  - export COMMIT=${TRAVIS_COMMIT::7}
  - export TAG=`if [ ! -z "$TRAVIS_TAG" ]; then echo "$TRAVIS_TAG"; else echo "$TRAVIS_BRANCH--$COMMIT"; fi`
  - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
  - docker-compose build
  - docker tag $IMAGE_NAME:latest $IMAGE_NAME:$TAG
  - docker push $IMAGE_NAME:$TAG
  - export TITLE="$IMAGE_NAME:$TAG is built properly and pushed to Dockerhub"
  - export TIMESTAMP=`date`
  - export GIT_LOG=`git log -1 --pretty=%B $COMMIT`
  - export TEXT="[build version] $TAG<br />[datetime] $TIMESTAMP<br />[changelog] $GIT_LOG<br />"
  #- chmod +x send_to_teams.sh && ./send_to_teams.sh
  - bash ./telegram_notification.sh


# If the `script` job fails, it will send a failure message to Teams channel
after_failure:
  - export TITLE="Travis:$TRAVIS_JOB_ID -- build job is failed"
  - export TEXT=[datetime]:`date`

# Allow Travis to help deploy the app on Heroku
deploy:
  provider: heroku
  api-key:
    secure: $HEROKU_API_KEY
  app: coronavirus-tg-api
  on:
    tags: true
    repo: $IMAGE_NAME

# Send the message of success after the deploy is done properly
after_deploy:
  - export TITLE="ðŸŽ‰ðŸŽ‰ðŸŽ‰New version $TAG is deployed to Heroku productionðŸŽ‰ðŸŽ‰ðŸŽ‰"
  - export TEXT=[datetime]:`date`
  - bash ./telegram_notification.sh
  #- ./send_to_teams.sh